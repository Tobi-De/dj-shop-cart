{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#dj-shop-cart","title":"dj-shop-cart","text":"<p>A simple and flexible cart manager for your django projects.</p> <p> </p> <p>\u2728\ud83d\udcda\u2728 Read the full documentation</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Add, remove, decrement and clear items from cart</li> <li>Authenticated users cart can be saved to database</li> <li>Write custom methods to easily hook into the items add / remove flow</li> <li>Custom get_price method to ensure that the cart always have an up-to-date products price</li> <li>Each item in the cart hold a reference to the associated product</li> <li>Metadata data can be attached to cart items</li> <li>Supports specification of product variation details</li> <li>Available context processor for easy access to the user cart in all your django templates</li> <li>Swappable backend storage, with session and database provided by default</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install dj-shop-cart with pip or poetry.</p> <pre><code>  pip install dj-shop-cart\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code># settings.py\n\nTEMPLATES = [\n    {\n        \"OPTIONS\": {\n            \"context_processors\": [\n                ...,\n                \"dj_shop_cart.context_processors.cart\", # If you want access to the cart instance in all templates\n            ],\n        },\n    }\n]\n\n# models.py\n\nfrom django.db import models\nfrom dj_shop_cart.cart import CartItem\nfrom dj_shop_cart.protocols import Numeric\n\nclass Product(models.Model):\n    ...\n\n    def get_price(self, item:CartItem) -&gt; Numeric:\n\"\"\"The only requirements of the dj_shop_cart package apart from the fact that the products you add\n        to the cart must be instances of django based models. You can use a different name for this method\n        but be sure to update the corresponding setting (see Configuration). Even if you change the name the\n        function signature should match this one.\n        \"\"\"\n\n\n# views.py\n\nfrom dj_shop_cart.cart import get_cart_class\nfrom django.http import HttpRequest\nfrom django.views.decorators.http import require_POST\nfrom django.shortcuts import get_object_or_404\n\nfrom .models import Product\n\nCart = get_cart_class()\n\n\n@require_POST\ndef add_product(request: HttpRequest, product_id:int):\n    product = get_object_or_404(Product.objects.all(), pk=product_id)\n    quantity = int(request.POST.get(\"quantity\"))\n    cart = Cart.new(request)\n    cart.add(product, quantity=quantity)\n    ...\n\n\n@require_POST\ndef remove_product(request: HttpRequest):\n    item_id = request.POST.get(\"item_id\")\n    quantity = int(request.POST.get(\"quantity\"))\n    cart = Cart.new(request)\n    cart.remove(item_id=item_id, quantity=quantity)\n    ...\n\n\n@require_POST\ndef empty_cart(request: HttpRequest):\n    Cart.new(request).empty()\n    ...\n</code></pre>"},{"location":"#used-by","title":"Used By","text":"<p>This project is used by the following companies:</p> <ul> <li>F\u00eamy bien \u00eatre</li> <li>Bj\u00f8rn Art</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Poetry is required (not really, you can set up the environment however you want and install the requirements manually) to set up a virtualenv, install it then run the following:</p> <pre><code>poetry install\npre-commit install --install-hooks\n</code></pre> <p>Tests can then be run quickly in that environment:</p> <pre><code>pytest\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any feedback, please reach out to me at tobidegnon@proton.me.</p>"},{"location":"codeofconduct/","title":"Code of Conduct","text":""},{"location":"codeofconduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"codeofconduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"codeofconduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"codeofconduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"codeofconduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"codeofconduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at tobidegnon@proton.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"codeofconduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"codeofconduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"codeofconduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"codeofconduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"codeofconduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"codeofconduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributor-guide","title":"Contributor Guide","text":"<p>Thank you for your interest in improving this project. This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"contributing/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and Python version are you using?</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"contributing/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"contributing/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<p>You need Python 3.8+ and the following tools:</p> <ul> <li>Poetry</li> </ul> <p>Install the package with development requirements:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"contributing/#how-to-test-the-project","title":"How to test the project","text":"<p>Run the full test suite:</p> <pre><code>$ pytest\n</code></pre> <p>Unit tests are located in the tests directory, and are written using the pytest testing framework.</p>"},{"location":"contributing/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li>The Nox test suite must pass without errors and warnings.</li> <li>Include unit tests. This project maintains 100% code coverage.</li> <li>If your changes add functionality, update the documentation accordingly.</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>To run linting and code formatting checks before committing your change, you can install pre-commit as a Git hook by running the following command:</p> <pre><code>$ pre-commit -- install\n</code></pre> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2022, DEGNON Tobi</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#configuration","title":"Configuration","text":"<p>Configure the cart behaviour in your Django settings. All settings are optional and must be strings if defined.</p> Name Description Default CART_SESSION_KEY The key used to store the cart in session <code>CART-ID</code> CART_CLASS The path to the <code>Cart</code> class to use. If you are using a custom class it must subclass <code>dj_shop_cart.cart.Cart</code> <code>dj_shop_cart.cart.Cart</code> CART_PRODUCT_GET_PRICE_METHOD The method name to use to dynamically get the price on the product instance <code>get_price</code> CART_STORAGE_BACKEND The path to the storage backend to use. If you define a custom storage backend, it should follow the <code>Storage</code> protocol, see the Backend Storage section below <code>dj_shop_cart.storages.SessionStorage</code> CART_CACHE_TIMEOUT The cache timeout when using the CartStorage backend, default to 5 days. 60 * 60 * 24 * 5"},{"location":"usage/#api-reference","title":"API Reference","text":""},{"location":"usage/#instantiate-a-new-cart","title":"Instantiate a new cart","text":"<pre><code>from dj_shop_cart.cart import get_cart_class\nfrom django.http import HttpRequest\n\nCart = get_cart_class()\n\ndef view(request:HttpRequest):\n    cart = Cart.new(request)\n    ...\n</code></pre> <p>The <code>new</code> method create a new cart and load existing data via the specified storage backend.</p>"},{"location":"usage/#add-a-product-to-the-cart","title":"Add a product to the cart","text":"<pre><code>cart.add(product, quantity=20)\n</code></pre> <p>Parameters</p> <ul> <li>product: An instance of a database product.</li> <li>quantity: The quantity to add.</li> <li>variant:  The product variation details, when specified, are used to uniquely identify items in the cart related to the same product,                  can be a python dictionary, a set, an integer or a string.</li> <li>override_quantity : Default to <code>False</code>, if <code>True</code> instead of adding to the existing quantity, will override it</li> <li>metadata: Optional metadata that is attached to the item, this dictionary can contain                 anything that you would want to attach to the created item in cart, the only requirements about                 it is that it needs to be json serializable.</li> </ul> <p>Returns a <code>CartItem</code>.</p>"},{"location":"usage/#increase-an-item-quantity","title":"Increase an item quantity","text":"<pre><code>cart.increase(item_id, quantity=20)\n</code></pre> <p>This method increase the quantity of an item that is already in the cart. It triggers the same <code>before_add</code> and <code>after_add</code> hooks as the <code>cart.add</code> method. You can think of this as a shortcut to <code>cart.add</code> for product that are already in the cart.</p> <p>Parameters</p> <ul> <li>item_id:  The cart item id.</li> <li>quantity: The quantity to add.</li> </ul> <p>Returns a <code>CartItem</code> or <code>None</code> if no item to increase was found.</p>"},{"location":"usage/#remove--decrement-a-product-from-the-cart","title":"Remove / Decrement a product from the cart","text":"<pre><code># Remove 10 from the quantity\ncart.remove(item_id, quantity=10)\n# Remove the whole item\ncart.remove(item_id)\n</code></pre> <p>Parameters</p> <ul> <li>item_id : The cart item id.</li> <li>quantity :  An optional quantity of the product to remove from the cart.   Indicate if you do not want to delete the item completely, if the quantity ends up being zero after the quantity is decreased, the item is completely removed.</li> <li>variant : Variant details of the product.</li> </ul> <p>Returns a <code>CartItem</code> or <code>None</code> if no item to remove was found.</p> <p>Note: An item is automatically removed from the cart when the associated database product is no longer available (delete from the database).</p>"},{"location":"usage/#empty-the-cart","title":"Empty the cart","text":"<p><pre><code>cart.empty()\n</code></pre> This method take no arguments.</p>"},{"location":"usage/#attributes-of-a-cart-instance","title":"Attributes of a <code>Cart</code> instance","text":"<pre><code>def my_view(request):\n    cart = Cart.new(request)\n    # by looping through the cart, we return all the CartItem objects.\n    for item in cart:\n        print(item.subtotal)\n\n    # find items based on product_pk, cart item id, variant details, quantity, etc.\n    item = cart.find_one(product_pk=1)[0]\n    assert item in cart\n\n    # the number of items in the cart\n    print(cart.count)\n\n    # the number of unique items\n    print(cart.unique_count)\n\n    # calling len on the cart returns the number of unique items in the cart, regardless of the quantity.\n    print(len(cart))\n\n    # attach some metadata to the cart\n    cart.update_metadata({\"discount\": \"10%\"})\n</code></pre> <ul> <li>total : The total cost of the cart.</li> <li>is_empty : A boolean value indicating whether the cart is empty or not.</li> <li>count :  The number of items in the cart, that's the sum of quantities.</li> <li>unique_count : The number of unique items in the cart, regardless of the quantity.</li> <li>products : A list of associated products.</li> <li>metadata : A dictionary containing the metadata of the cart.</li> <li>empty(clear_metadata=True) : Empty the cart. Takes an optional argument <code>clear_metadata</code> that defaults to <code>True</code>, if set to <code>False</code> the metadata of the cart will not be cleared.</li> <li>update_metadata(metadata:dict) : Update the metadata of the cart.</li> <li>clear_metadata(*keys:list[str]) : Clear the metadata of the cart. Takes an optional list of keys to clear, if no keys are specified, all metadata is cleared.</li> <li>find(**criteria) : Returns a list of cart items matching the given criteria.</li> <li>find_one(**criteria) : Returns the first cart item that matches the given criteria, if no match is found return None.</li> <li>variants_group_by_product() :  Return a dictionary with the products ids as keys and a list of variant as values.</li> </ul>"},{"location":"usage/#classmethods-of-cart","title":"Classmethods of <code>Cart</code>","text":"<ul> <li>new(request:HttpRequest, prefix=\"default\") : Create a new cart instance and load existing data from the storage backend.</li> <li>empty_all(request:HttpRequest) : Empty all carts for the current user.</li> </ul>"},{"location":"usage/#multiple-carts","title":"Multiple Carts","text":"<p>You can manage multiple carts at the same time with the same storage using the <code>prefix</code> argument of the <code>Cart.new</code> method.</p> <p><pre><code>cart_a = Cart.new(request, prefix=\"cart_a\")\ncart_a.add(product_a, quantity=10)\nassert product_a in cart_a\n\ncart_b = Cart.new(request, prefix=\"cart_b\")\ncart_b.add(product_b, quantity=10)\nassert product_b in cart_b\n\nassert product_a not in cart_b\nassert product_b not in cart_a\n</code></pre> A little tip if you don't want to have to remember to pass the right prefix each time you instantiate a new cart,  use the <code>partial</code> method from the <code>functools</code> module.</p> <pre><code>from functools import partial\n\nget_cart_a = partial(Cart.new, prefix=\"cart_a\")\ncart_a = get_cart_a(request)\ncart_a.add(product_a, quantity=10)\n</code></pre>"},{"location":"usage/#custom-cart-class","title":"Custom Cart Class","text":"<p><pre><code># settings.py\nCART_CLASS = \"your_project.somewhere_in_your_project.Cart\"\n\n# somewhere_in_your_project.py\nfrom dj_shop_cart.cart import CartItem, Cart as DjCart\n\n\nclass Cart(DjCart):\n\n    def before_add(self, item: CartItem, quantity: int) -&gt; None:\n        pass\n\n    def after_add(self, item: CartItem) -&gt; None:\n        pass\n\n    def before_remove(self, item: CartItem | None = None, quantity: int | None = None) -&gt; None:\n        pass\n\n    def after_remove(self, item: CartItem | None = None) -&gt; None:\n        pass\n</code></pre> The 4 methods defined in the class above are custom hooks that you can override to customize the <code>Add/Remove</code> process.</p>"},{"location":"usage/#properties-of-cartitem","title":"Properties of <code>CartItem</code>","text":"<ul> <li>id : A unique id for the item.</li> <li>price : The item price calculated via the <code>get_price</code> method.</li> <li>subtotal : Item price x quantity.</li> <li>product : The associated product.</li> <li>variant : Variant info specified when the product was added to the cart, default to <code>None</code>, is used to compare items in the cart.</li> <li>metadata : A dictionary containing the metadata specified when the product was added to the cart, not used when comparing two cart items.</li> </ul>"},{"location":"usage/#storage-backend","title":"Storage Backend","text":"<p>The storage backend are used to store the cart items data. Two backends are provided by default, <code>SessionStorage</code> and <code>DBStorage</code>.</p>"},{"location":"usage/#sessionstorage","title":"SessionStorage","text":"<pre><code># settings.py\n\nCART_STORAGE_BACKEND = \"dj_shop_cart.storages.SessionStorage\"\n</code></pre> <p>This is the default backend used when no one is specified. It uses the django sessions app to store carts in the user session. Carts only live for the duration of the user session and each new session generates a new cart. By default, django stores the session in the database, but you can configure your session engine to use your cache backend to speed things up, especially if you're using something like redis or memcached as your cache backend.</p>"},{"location":"usage/#cachestorage","title":"CacheStorage","text":"<pre><code># settings.py\n\nCART_STORAGE_BACKEND = \"dj_shop_cart.storages.CacheStorage\"\n</code></pre> <p>This is the recommended backend if you want to store your customers' shopping carts (especially authenticated ones) beyond the duration of their sessions. This backend stores the cart details using Django's cache framework which, depending on how it is configured, could be much faster than SessionStorage and DBStorage which are both database dependent. There are a few things to keep in mind when using this backend:</p> <ul> <li>This backend storage handles both authenticated and unauthenticated users.</li> <li>Unauthenticated users' cart details are retained after the end of the current user's session but there is no way to identify that a cart belongs to a specific unauthenticated user between sessions, so if an unauthenticated user lives without login-in the cart data is lost.</li> <li>There is a timeout after which the data in a cart will be automatically deleted, the default value is 5 days, and it can be configured with the CART_CACHE_TIMEOUT settings.</li> </ul>"},{"location":"usage/#dbstorage","title":"DBStorage","text":"<pre><code># settings.py\n\nINSTALLED_APPS = [\n    ...,\n    \"dj_shop_cart\",\n    ...,\n]\n\nCART_STORAGE_BACKEND = \"dj_shop_cart.storages.DBStorage\"\n</code></pre> <p>This backend persists users carts in the database but only when they are authenticated. There is no point in saving a cart that is linked to a user with no account in your system, your database will be filled with carts that can't be associated with a specific user. This backend works by using <code>SessionStorage</code> when users are not authenticated, and then saving their cart to the database when the user authenticates. There is always only one Cart object associated with a user at a time, so be sure to empty the cart after the checkout process to avoid reusing data from a previously processed cart. Cart objects in the database are not automatically deleted.</p>"},{"location":"usage/#custom-storage-backend","title":"Custom storage backend","text":"<p>You can also create your own custom storage backend, a redis storage backend for example. You can also import and use the provided backend storages when building your own (like the DBStorage does). You don't need to inherit a specific class, all you need to do is write a class that defines some specific methods and attributes, a class that follows a protocol. Now that your custom storage backend is ready, all you have to do is specify it via the <code>CART_STORAGE_BACKEND</code> settings. The protocol to be implemented is described as follows:</p> <pre><code>from typing import Protocol\n\nfrom django.http import HttpRequest\n\nclass Storage(Protocol):\n    request: HttpRequest\n\n    def load(self) -&gt; list[dict]:\n        ...\n\n    def save(self, items: list[dict]) -&gt; None:\n        ...\n\n    def clear(self) -&gt; None:\n        ...\n</code></pre>"}]}